{
  "name": "PN721",
  "functions": [
    {
      "name": "_add",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "tr",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "now",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "admin_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getAdmin",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUH1BD2DN2hi46eJev9YIpOOiP4ImzRLgc7Mzm61iCh5RSdLqC/rfcqO9oaU+z/DEVctTDtj2IQVSLNOeZtq0XV5j5uCf448rsRz4N4wrhBXkPceYq/LvAi0xln0bkfnpvAN7prCPa7dNqideQZ6B9eaNBjS4upq6SOGlyU64oIOaPLkk8/0cg885Raz06In3HvErxkF/2p+8M/cH9fbeJlO03hWBJGPlCYYXvPYw34eTdzFmZdPidX8yHFVlmM8Aa2/RE2EBQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getData",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/9WYS2/CMAzH0zel0PF+nartjgrsuEM/A7vtVgm2C6wS7bSvv6XE2n9dhJBwVc0SxI2D/bOTQIIjhDDEWSzQUagvUW18m6wMPl+xAYyW0k2l25DDi2p9ZUdxQU+YuFz+usUOsPrATPmEym7zxl37UFsB9RaaugmIL1kcXpayri6vz0fpwwN+ypXYA7C70Hq8HOW+cMTvmtIz8l3LajbMWtf8t3h9lusbayrl0vpuQX4+M0tHsdC8kv9qbXFuA16GWProQL4Uk+K01as6jnQb7AFwhryc5RrsKl+GeoUVFhn3roa4IcwLclAsC8Y8qLYL9aA61lkblAR0ioUsRsMsvvi753ywt6HPrHxWzsEW7D2lmxo/Pc04zL1fQ+4YJ4HnPuRmVPiaZGlrWAa8LOV3zFD8CM3PADiIaQgcI+aaSB9jDccIOCj+GDgmvBxr6WOq4ZgAB8WfAseMl2PjVzikXNq/M2CZ87KUa2QBsYiL4gRg7wPHgpej3DfzSv70jHzXsg7/Eeu4YVYf+qbQZ1aYPcVo8TJuajjDlnsM76ZSLu0xii/PnfSbnRfZKX3bb/fpDq/A5BavwkKj4/GSrjQ29OHxUoonNH8NJKqNb5MVJiA0CdBdXjfuXrVPqn0+1yXKD1kRxdH793t6OGSf+90yQlseHT/yIsqL9FREr6fsGK2WXwPzHpEMEQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getSize",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUG9Qc/gDZrY+Gmi3j+WyKQjoj+FTZqlQGdmZ7daRJS8o5Ml1I/1MWVHe0PK/cpwxFUL084YNmEF0qxT3qdadF3e067gnyOPa/FwbxhXiCvIZw+x12VeBFrjLHp3oHNT+AZ3TeEe124b1M48A72Da0saDGlxdbX0EcPLEh1xQQc0efLJZ3q5B55yi9lp0RPuPeLfjIJ/Mz/4Zx7P2328TudpvCiCyEdKEwyveexhP48m7uLMy7fEan7kuCrLMV4lLa+7hAUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "mint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "tr",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "now",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "transfer",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod address_note;\nmod public_payload;\n\ncontract PN721 {\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            note_getter_options::NoteGetterOptions,\n            utils as note_utils,\n        },\n        state_vars::{map::Map, set::Set, public_state::PublicState, singleton::Singleton},\n        types::type_serialization::{\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n        \n    };\n \n    use crate::address_note::{AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN};\n    use crate::public_payload::{PublicPayload, PUBLIC_PAYLOAD_SERIALIZED_LEN, PublicPayloadSerializationMethods};\n    \n    struct Storage {\n        // the attributes of the private NFT\n        size: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        owners: Map<Singleton<AddressNote, ADDRESS_NOTE_LEN>>,\n        nft_data: Map<PublicState<PublicPayload, PUBLIC_PAYLOAD_SERIALIZED_LEN>>,\n        \n        \n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                size: PublicState::new(context, 1, FieldSerializationMethods),\n                admin: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                owners: Map::new(\n                    context,\n                    3, // Storage slot\n                    |context, slot| {\n                        Singleton::new(context, slot, AddressNoteMethods)\n                    },\n                ),\n                nft_data: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PublicState::new(context, slot, PublicPayloadSerializationMethods)\n                    },\n                ),\n\n                \n               \n            }\n        }\n    }\n\n    // Constructs the contract and sets `size` of the collection to 0 at init\n    #[aztec(private)]\n    fn constructor( \n       admin_: AztecAddress \n    )  {\n        let selector = compute_selector(\"_init((Field))\");\n        context.call_public_function(context.this_address(), selector, [admin_.address]);\n       \n             \n        \n        \n    }\n\n    #[aztec(public)]\n    internal fn _init(admin_: AztecAddress) {\n        storage.admin.write(admin_);\n        storage.size.write(0);\n    }\n\n   \n\n    #[aztec(public)]\n    internal fn _add(proj: Field, tr: Field, now: Field) {\n        \n        let new_size = storage.size.read() + 1;\n        storage.size.write(new_size);\n\n        let pub_payload = PublicPayload {\n            project: proj,\n            tier: tr,\n            creation: now,\n        };\n\n        storage.nft_data.at(new_size).write(pub_payload);\n        \n\n    }\n\n    // Mints nft with said specifications and assigns ownership to owner\n    #[aztec(private)]\n    fn mint( \n        proj: Field,\n        tr: Field, \n        now: Field\n    ) {\n        \n        \n        let selector = compute_selector(\"_add((Field), Field, Field)\");\n        context.call_public_function(context.this_address(), selector, [proj, tr, now]);\n        \n        let owner = context.msg_sender();\n        let mut owner_note = AddressNote::new(owner, owner);\n        storage.owners.at(1).initialize(&mut owner_note, Option::some(owner));\n        //storage.owners.at(new_size).replace(&mut owner_note);\n        \n        \n    }\n\n    // Transfers nft with given `id` from msg_sender to  `recipient`.\n    #[aztec(private)]\n    fn transfer(\n        id: Field, \n        recipient: Field,\n    )  {\n        \n        \n        let mut recipient_note = AddressNote::new(recipient, recipient);\n        \n        \n\n        storage.owners.at(id).replace(&mut recipient_note);\n    }\n\n\n    unconstrained fn getData(\n        id: Field,\n    ) -> [Field; 3] {\n        \n        let pub_payload = storage.nft_data.at(id).read();\n        \n        let tier = pub_payload.tier;\n        let creation = pub_payload.creation;\n        let project = pub_payload.project;\n        \n        let res = [project, tier, creation];\n\n        res\n        \n        \n    }\n\n    unconstrained fn getAdmin() -> Field {\n        let admin = storage.admin.read();\n        admin.address\n    }\n\n    unconstrained fn getSize() -> Field {\n        let s = storage.size.read();\n        s\n    }\n\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/context"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "82": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization"
      },
      "84": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/types/type_serialization/aztec_address_serialization"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/utils"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(preimage)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/value-note/src/value_note"
      },
      "90": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal ADDRESS_NOTE_LEN: Field = 2;\n\n// Stores an address\nstruct AddressNote {\n    address: Field,\n    owner: Field,\n    header: NoteHeader,\n}\n\nimpl AddressNote {\n    pub fn new(address: Field, owner: Field) -> Self {\n        AddressNote {\n            address,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; ADDRESS_NOTE_LEN]{\n        [self.address, self.owner]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(AddressNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote {\n        address: preimage[0],\n        owner: preimage[1],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN]{\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/address_note"
      },
      "91": {
        "source": "   use dep::aztec::types::type_serialization::TypeSerializationInterface;\n   \n   struct PublicPayload {\n        project: Field,\n        tier: Field,\n        creation: Field,\n    }\n\n    impl PublicPayload {\n\n        pub fn new(project: Field,\n        tier: Field,\n        creation: Field,\n         ) -> Self {\n            Self {\n                project,               \n                tier,\n                creation,\n            }\n        }\n        pub fn get(&mut self,\n         ) ->  [Field] {\n            [self.project, self.tier, self.creation]\n        }\n    }\n\nglobal PUBLIC_PAYLOAD_SERIALIZED_LEN: Field = 3;\n\npub fn deserializePublicPayload(fields: [Field; PUBLIC_PAYLOAD_SERIALIZED_LEN]) -> PublicPayload {\n    PublicPayload{project: fields[0] as Field, tier: fields[1] as Field, creation: fields[2] as Field}\n}\n\npub fn serializePublicPayload(pp: PublicPayload) -> [Field; PUBLIC_PAYLOAD_SERIALIZED_LEN] {\n    [pp.project, pp.tier, pp.creation]\n}\n\n\nglobal PublicPayloadSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializePublicPayload,\n    serialize: serializePublicPayload,\n};",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/public_payload"
      }
    }
  }
}