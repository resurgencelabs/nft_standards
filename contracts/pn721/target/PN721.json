{
  "name": "PN721",
  "functions": [
    {
      "name": "_add",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "tr",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "now",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "n",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "admin_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getAdmin",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUH1BD2DN2hi46eJev9YIpOOiP4ImzRLgc7Mzm61iCh5RSdLqC/rfcqO9oaU+z/DEVctTDtj2IQVSLNOeZtq0XV5j5uCf448rsRz4N4wrhBXkPceYq/LvAi0xln0bkfnpvAN7prCPa7dNqideQZ6B9eaNBjS4upq6SOGlyU64oIOaPLkk8/0cg885Raz06In3HvErxkF/2p+8M/cH9fbeJlO03hWBJGPlCYYXvPYw34eTdzFmZdPidX8yHFVlmM8Aa2/RE2EBQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getData",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/9WYS2/CMAzH0zel0PF+nartjgrsuEM/A7vtVgm2C6wS7bSvv6XE2n9dhJBwVc0SxI2D/bOTQIIjhDDEWSzQUagvUW18m6wMPl+xAYyW0k2l25DDi2p9ZUdxQU+YuFz+usUOsPrATPmEym7zxl37UFsB9RaaugmIL1kcXpayri6vz0fpwwN+ypXYA7C70Hq8HOW+cMTvmtIz8l3LajbMWtf8t3h9lusbayrl0vpuQX4+M0tHsdC8kv9qbXFuA16GWProQL4Uk+K01as6jnQb7AFwhryc5RrsKl+GeoUVFhn3roa4IcwLclAsC8Y8qLYL9aA61lkblAR0ioUsRsMsvvi753ywt6HPrHxWzsEW7D2lmxo/Pc04zL1fQ+4YJ4HnPuRmVPiaZGlrWAa8LOV3zFD8CM3PADiIaQgcI+aaSB9jDccIOCj+GDgmvBxr6WOq4ZgAB8WfAseMl2PjVzikXNq/M2CZ87KUa2QBsYiL4gRg7wPHgpej3DfzSv70jHzXsg7/Eeu4YVYf+qbQZ1aYPcVo8TJuajjDlnsM76ZSLu0xii/PnfSbnRfZKX3bb/fpDq/A5BavwkKj4/GSrjQ29OHxUoonNH8NJKqNb5MVJiA0CdBdXjfuXrVPqn0+1yXKD1kRxdH793t6OGSf+90yQlseHT/yIsqL9FREr6fsGK2WXwPzHpEMEQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getSize",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWw7CIBBcKA/RxH8/vUG9Qc/gDZrY+Gmi3j+WyKQjoj+FTZqlQGdmZ7daRJS8o5Ml1I/1MWVHe0PK/cpwxFUL084YNmEF0qxT3qdadF3e067gnyOPa/FwbxhXiCvIZw+x12VeBFrjLHp3oHNT+AZ3TeEe124b1M48A72Da0saDGlxdbX0EcPLEh1xQQc0efLJZ3q5B55yi9lp0RPuPeLfjIJ/Mz/4Zx7P2328TudpvCiCyEdKEwyveexhP48m7uLMy7fEan7kuCrLMV4lLa+7hAUAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "mint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "tr",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "now",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "transfer",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "id",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod address_note;\nmod public_payload;\n\ncontract PN721 {\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        state_vars::{map::Map, set::Set, public_state::PublicState, singleton::Singleton},\n        types::type_serialization::{\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n        \n    };\n \n    use crate::address_note::{AddressNote, AddressNoteMethods, ADDRESS_NOTE_LEN};\n    use crate::public_payload::{PublicPayload, PUBLIC_PAYLOAD_SERIALIZED_LEN, PublicPayloadSerializationMethods};\n    \n    struct Storage {\n        // the attributes of the private NFT\n        size: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        owners: Map<Singleton<AddressNote, ADDRESS_NOTE_LEN>>,\n        nft_data: Map<PublicState<PublicPayload, PUBLIC_PAYLOAD_SERIALIZED_LEN>>,\n        \n        \n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                size: PublicState::new(context, 1, FieldSerializationMethods),\n                admin: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                owners: Map::new(\n                    context,\n                    3, // Storage slot\n                    |context, slot| {\n                        Singleton::new(context, slot, AddressNoteMethods)\n                    },\n                ),\n                nft_data: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PublicState::new(context, slot, PublicPayloadSerializationMethods)\n                    },\n                ),\n\n                \n               \n            }\n        }\n    }\n\n    // Constructs the contract and sets `size` of the collection to 0 at init\n    #[aztec(private)]\n    fn constructor( \n       admin_: AztecAddress \n    )  {\n        let selector = compute_selector(\"_init((Field))\");\n        context.call_public_function(context.this_address(), selector, [admin_.address]);\n       \n             \n        \n        \n    }\n\n    #[aztec(public)]\n    internal fn _init(admin_: AztecAddress) {\n        storage.admin.write(admin_);\n        storage.size.write(0);\n    }\n\n    #[aztec(public)]\n    internal fn _add(proj: Field, tr: Field, now: Field, n: Field) {\n        \n        \n        storage.size.write(n);\n\n        let pub_payload = PublicPayload {\n            project: proj,\n            tier: tr,\n            creation: now,\n        };\n\n        storage.nft_data.at(n).write(pub_payload);\n\n    }\n\n    // Mints nft with said specifications and assigns ownership to owner\n    #[aztec(private)]\n    fn mint( \n        proj: Field,\n        tr: Field, \n        now: Field\n    )  {\n        \n        let new_size = storage.size.read() + 1;\n        let selector = compute_selector(\"_add((Field, Field, Field, Field))\");\n        context.call_public_function(context.this_address(), selector, [proj, tr, now, new_size]);\n        \n        let owner = context.msg_sender();\n        let mut owner_note = AddressNote::new(owner);\n        storage.owners.at(new_size).replace(&mut owner_note);\n\n        \n    }\n\n    // Transfers nft with given `id` from msg_sender to  `recipient`.\n    #[aztec(private)]\n    fn transfer(\n        id: Field, \n        recipient: Field,\n    )  {\n        \n        \n        let mut recipient_note = AddressNote::new(recipient);\n        \n        \n\n        storage.owners.at(id).replace(&mut recipient_note);\n    }\n\n\n    unconstrained fn getData(\n        id: Field,\n    ) -> [Field; 3] {\n        \n        let pub_payload = storage.nft_data.at(id).read();\n        \n        let tier = pub_payload.tier;\n        let creation = pub_payload.creation;\n        let project = pub_payload.project;\n        \n        let res = [project, tier, creation];\n\n        res\n        \n        \n    }\n\n    unconstrained fn getAdmin() -> Field {\n        let admin = storage.admin.read();\n        admin.address\n    }\n\n    unconstrained fn getSize() -> Field {\n        let s = storage.size.read();\n        s\n    }\n\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/context"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "82": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization"
      },
      "84": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/types/type_serialization/aztec_address_serialization"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/aztec/src/utils"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(preimage)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.10/yarn-project/aztec-nr/value-note/src/value_note"
      },
      "90": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal ADDRESS_NOTE_LEN: Field = 1;\n\nstruct AddressNote {\n    address: Field,\n    header: NoteHeader,\n}\n \nimpl AddressNote {\n    pub fn new(address: Field) -> Self {\n        AddressNote {\n            address,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; ADDRESS_NOTE_LEN] {\n        let mut res: [Field; ADDRESS_NOTE_LEN] = [0; ADDRESS_NOTE_LEN];\n        res[0] = self.address;\n        res\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(AddressNoteMethods, self);\n        let secret = get_secret_key(self.address);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote {\n        address: preimage[0],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/address_note"
      },
      "91": {
        "source": "   use dep::aztec::types::type_serialization::TypeSerializationInterface;\n   \n   struct PublicPayload {\n        project: Field,\n        tier: Field,\n        creation: Field,\n    }\n\n    impl PublicPayload {\n\n        pub fn new(project: Field,\n        tier: Field,\n        creation: Field,\n         ) -> Self {\n            Self {\n                project,               \n                tier,\n                creation,\n            }\n        }\n        pub fn get(&mut self,\n         ) ->  [Field] {\n            [self.project, self.tier, self.creation]\n        }\n    }\n\nglobal PUBLIC_PAYLOAD_SERIALIZED_LEN: Field = 3;\n\npub fn deserializePublicPayload(fields: [Field; PUBLIC_PAYLOAD_SERIALIZED_LEN]) -> PublicPayload {\n    PublicPayload{project: fields[0] as Field, tier: fields[1] as Field, creation: fields[2] as Field}\n}\n\npub fn serializePublicPayload(pp: PublicPayload) -> [Field; PUBLIC_PAYLOAD_SERIALIZED_LEN] {\n    [pp.project, pp.tier, pp.creation]\n}\n\n\nglobal PublicPayloadSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializePublicPayload,\n    serialize: serializePublicPayload,\n};",
        "path": "/home/ritik/hello_aztec/nft_standards/contracts/pn721/src/public_payload"
      }
    }
  }
}